<?xml version="1.0"?>
<ESBMessagePipelineStorage xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance">
  <Id>a6c2620d-065c-40c0-abf1-b37f07e213da</Id>
  <Version>74413231-8b8f-48e7-9bfb-e0b0c4d0d445</Version>
  <BusinessFlows />
  <Description />
  <Name>Process.Inbound.X12</Name>
  <IsSystemObject>false</IsSystemObject>
  <Category>General</Category>
  <IsEncrypted>true</IsEncrypted>
  <Path />
  <PipelineBlob>&lt;ESBMessagePipeline xmlns:i="http://www.w3.org/2001/XMLSchema-instance" xmlns="http://schemas.neuronesb.com/pipelines/"&gt;&lt;Category&gt;General&lt;/Category&gt;&lt;Description i:nil="true" /&gt;&lt;GlobalProperties xmlns:d2p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays" /&gt;&lt;Name&gt;Process.Inbound.X12&lt;/Name&gt;&lt;Properties xmlns:d2p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays" /&gt;&lt;ReferencedAssemblies xmlns:d2p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays"&gt;&lt;d2p1:string&gt;OopFactory.X12, Version=3.0.10.0, Culture=neutral, PublicKeyToken=24f1be617e479584&lt;/d2p1:string&gt;&lt;d2p1:string&gt;OopFactory.X12.Validation, Version=1.0.0.0, Culture=neutral, PublicKeyToken=24f1be617e479584&lt;/d2p1:string&gt;&lt;/ReferencedAssemblies&gt;&lt;Steps&gt;&lt;ESBMessagePipelineStep i:type="ExceptionPipelineStepOfESBMessagexAPWb1W4"&gt;&lt;Bindings xmlns:d4p1="http://schemas.datacontract.org/2004/07/Neuron.ComponentModel" /&gt;&lt;BreakPoint&gt;Disable&lt;/BreakPoint&gt;&lt;Disable&gt;false&lt;/Disable&gt;&lt;Name&gt;X12&lt;/Name&gt;&lt;Uniquename /&gt;&lt;Catch&gt;&lt;Bindings xmlns:d5p1="http://schemas.datacontract.org/2004/07/Neuron.ComponentModel" /&gt;&lt;BreakPoint&gt;Disable&lt;/BreakPoint&gt;&lt;Disable&gt;false&lt;/Disable&gt;&lt;Name&gt;Group&lt;/Name&gt;&lt;Uniquename /&gt;&lt;Children&gt;&lt;ESBMessagePipelineStep xmlns:d6p1="http://schemas.neuronesb.com/pipelines/esb/" i:type="d6p1:EsbMessageCSharpCodePipelineStep"&gt;&lt;Bindings xmlns:d7p1="http://schemas.datacontract.org/2004/07/Neuron.ComponentModel" /&gt;&lt;BreakPoint&gt;Disable&lt;/BreakPoint&gt;&lt;Disable&gt;false&lt;/Disable&gt;&lt;Name&gt;Exception&lt;/Name&gt;&lt;Uniquename /&gt;&lt;BreakPointLines xmlns:d7p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays" /&gt;&lt;Code&gt;context.Instance.TraceError("++++++++++ Process Inbound X12 - !!!EXCEPTION!!!");

PipelineException parentEx = (PipelineException)context.Properties["PipelineException"];

context.Instance.TraceError("...!!!........Process Inbound X12 - Exception occured in: " + parentEx.PipelineStep + ".  Exception: " + parentEx.InnerException.Message);

context.Data.Text = "&amp;lt;Response&amp;gt;ERROR: " + parentEx.InnerException.Message + "&amp;lt;/Response&amp;gt;";&lt;/Code&gt;&lt;ReferencedAssemblies xmlns:d7p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays"&gt;&lt;d7p1:string&gt;Neuron&lt;/d7p1:string&gt;&lt;d7p1:string&gt;Neuron.Pipelines&lt;/d7p1:string&gt;&lt;d7p1:string&gt;Neuron.Esb&lt;/d7p1:string&gt;&lt;d7p1:string&gt;System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/d7p1:string&gt;&lt;d7p1:string&gt;System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/d7p1:string&gt;&lt;d7p1:string&gt;System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/d7p1:string&gt;&lt;d7p1:string&gt;System.Xml.Linq, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/d7p1:string&gt;&lt;d7p1:string&gt;System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/d7p1:string&gt;&lt;d7p1:string&gt;System.Data.DataSetExtensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/d7p1:string&gt;&lt;d7p1:string&gt;System.Runtime.Serialization, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/d7p1:string&gt;&lt;d7p1:string&gt;System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/d7p1:string&gt;&lt;d7p1:string&gt;Newtonsoft.Json, Version=8.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed&lt;/d7p1:string&gt;&lt;d7p1:string&gt;Microsoft.CSharp, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a&lt;/d7p1:string&gt;&lt;/ReferencedAssemblies&gt;&lt;TypeName&gt;Typec31cc88e1bc4d1c9da192b561249c7&lt;/TypeName&gt;&lt;/ESBMessagePipelineStep&gt;&lt;/Children&gt;&lt;/Catch&gt;&lt;Finally&gt;&lt;Bindings xmlns:d5p1="http://schemas.datacontract.org/2004/07/Neuron.ComponentModel" /&gt;&lt;BreakPoint&gt;Disable&lt;/BreakPoint&gt;&lt;Disable&gt;false&lt;/Disable&gt;&lt;Name&gt;Group&lt;/Name&gt;&lt;Uniquename /&gt;&lt;Children /&gt;&lt;/Finally&gt;&lt;Try&gt;&lt;Bindings xmlns:d5p1="http://schemas.datacontract.org/2004/07/Neuron.ComponentModel" /&gt;&lt;BreakPoint&gt;Disable&lt;/BreakPoint&gt;&lt;Disable&gt;false&lt;/Disable&gt;&lt;Name&gt;Group&lt;/Name&gt;&lt;Uniquename /&gt;&lt;Children&gt;&lt;ESBMessagePipelineStep xmlns:d6p1="http://schemas.neuronesb.com/pipelines/esb/" i:type="d6p1:EsbMessageCSharpCodePipelineStep"&gt;&lt;Bindings xmlns:d7p1="http://schemas.datacontract.org/2004/07/Neuron.ComponentModel" /&gt;&lt;BreakPoint&gt;Disable&lt;/BreakPoint&gt;&lt;Disable&gt;false&lt;/Disable&gt;&lt;Name&gt;Serialize X12 to XML&lt;/Name&gt;&lt;Uniquename /&gt;&lt;BreakPointLines xmlns:d7p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays" /&gt;&lt;Code&gt;context.Instance.TraceInformation("++++++++++ Process Inbound X12 - Serialize EDI To XML Step - Start");

//Save the X12 message
context.Properties.Add("x12", context.Data.Text);

//Serialize to XML
string xml = String.Empty;
XDocument doc = new XDocument();
doc.Add(new XElement("Interchanges", doc.Root));

var parser = new OopFactory.X12.Parsing.X12Parser();
List&amp;lt;OopFactory.X12.Parsing.Model.Interchange&amp;gt; interchanges = parser.ParseMultiple(context.Data.Text);

//Process multiple ISA envelopes, if present
foreach (OopFactory.X12.Parsing.Model.Interchange interchange in interchanges)
{
	xml = interchange.Serialize().Replace("&amp;lt;?xml version=\"1.0\"?&amp;gt;", "");	
	doc.Element("Interchanges").Add(new XElement(XElement.Parse(xml)));
}
	
context.Data.Text = doc.ToString();

//Save the xml message
context.Properties.Add("xml", doc.ToString());
&lt;/Code&gt;&lt;ReferencedAssemblies xmlns:d7p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays"&gt;&lt;d7p1:string&gt;Neuron&lt;/d7p1:string&gt;&lt;d7p1:string&gt;Neuron.Pipelines&lt;/d7p1:string&gt;&lt;d7p1:string&gt;Neuron.Esb&lt;/d7p1:string&gt;&lt;d7p1:string&gt;System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/d7p1:string&gt;&lt;d7p1:string&gt;System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/d7p1:string&gt;&lt;d7p1:string&gt;System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/d7p1:string&gt;&lt;d7p1:string&gt;System.Xml.Linq, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/d7p1:string&gt;&lt;d7p1:string&gt;System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/d7p1:string&gt;&lt;d7p1:string&gt;System.Data.DataSetExtensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/d7p1:string&gt;&lt;d7p1:string&gt;System.Runtime.Serialization, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/d7p1:string&gt;&lt;d7p1:string&gt;System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/d7p1:string&gt;&lt;/ReferencedAssemblies&gt;&lt;TypeName&gt;Typeee59f0da89a4050be33f301ff0352f&lt;/TypeName&gt;&lt;/ESBMessagePipelineStep&gt;&lt;ESBMessagePipelineStep i:type="SplitterPipelineStepOfESBMessageESBMessageu6r3vdAt"&gt;&lt;Bindings xmlns:d7p1="http://schemas.datacontract.org/2004/07/Neuron.ComponentModel" /&gt;&lt;BreakPoint&gt;Disable&lt;/BreakPoint&gt;&lt;Disable&gt;false&lt;/Disable&gt;&lt;Name&gt;Interchanges&lt;/Name&gt;&lt;Uniquename /&gt;&lt;Aggregator i:type="NullAggregatorOfESBMessageESBMessageu6r3vdAt" /&gt;&lt;Executor i:type="SynchronousSplitExecutorOfESBMessagexAPWb1W4" /&gt;&lt;ForEach&gt;&lt;Bindings xmlns:d8p1="http://schemas.datacontract.org/2004/07/Neuron.ComponentModel" /&gt;&lt;BreakPoint&gt;Disable&lt;/BreakPoint&gt;&lt;Disable&gt;false&lt;/Disable&gt;&lt;Name&gt;Group&lt;/Name&gt;&lt;Uniquename /&gt;&lt;Children&gt;&lt;ESBMessagePipelineStep xmlns:d9p1="http://schemas.neuronesb.com/pipelines/esb/" i:type="d9p1:EsbMessageCSharpCodePipelineStep"&gt;&lt;Bindings xmlns:d10p1="http://schemas.datacontract.org/2004/07/Neuron.ComponentModel" /&gt;&lt;BreakPoint&gt;Disable&lt;/BreakPoint&gt;&lt;Disable&gt;false&lt;/Disable&gt;&lt;Name&gt;Save ISA Envelope&lt;/Name&gt;&lt;Uniquename /&gt;&lt;BreakPointLines xmlns:d10p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays" /&gt;&lt;Code&gt;// Save X12 envelope values for future useXDocument doc = context

XDocument doc = new XDocument();
doc = context.Data.ToXDocument();

context.Properties["isa06"] = (from x in doc.Root.Descendants("ISA") select (string)x.Element("ISA06")).SingleOrDefault().ToString();
context.Properties["isa08"] = (from x in doc.Root.Descendants("ISA") select (string)x.Element("ISA08")).SingleOrDefault().ToString();
context.Properties["isa12"] = (from x in doc.Root.Descendants("ISA") select (string)x.Element("ISA12")).SingleOrDefault().ToString();
context.Properties["isa13"] = (from x in doc.Root.Descendants("ISA") select (string)x.Element("ISA13")).SingleOrDefault().ToString();
context.Properties["isa14"] = (from x in doc.Root.Descendants("ISA") select (string)x.Element("ISA14")).SingleOrDefault().ToString();&lt;/Code&gt;&lt;ReferencedAssemblies xmlns:d10p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays"&gt;&lt;d10p1:string&gt;Neuron&lt;/d10p1:string&gt;&lt;d10p1:string&gt;Neuron.Pipelines&lt;/d10p1:string&gt;&lt;d10p1:string&gt;Neuron.Esb&lt;/d10p1:string&gt;&lt;d10p1:string&gt;System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/d10p1:string&gt;&lt;d10p1:string&gt;System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/d10p1:string&gt;&lt;d10p1:string&gt;System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/d10p1:string&gt;&lt;d10p1:string&gt;System.Xml.Linq, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/d10p1:string&gt;&lt;d10p1:string&gt;System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/d10p1:string&gt;&lt;d10p1:string&gt;System.Data.DataSetExtensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/d10p1:string&gt;&lt;d10p1:string&gt;System.Runtime.Serialization, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/d10p1:string&gt;&lt;d10p1:string&gt;System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/d10p1:string&gt;&lt;d10p1:string&gt;Newtonsoft.Json, Version=8.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed&lt;/d10p1:string&gt;&lt;d10p1:string&gt;Microsoft.CSharp, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a&lt;/d10p1:string&gt;&lt;/ReferencedAssemblies&gt;&lt;TypeName&gt;Typee9408f71ffe4332a7d7a7894cff71f&lt;/TypeName&gt;&lt;/ESBMessagePipelineStep&gt;&lt;ESBMessagePipelineStep i:type="SplitterPipelineStepOfESBMessageESBMessageu6r3vdAt"&gt;&lt;Bindings xmlns:d10p1="http://schemas.datacontract.org/2004/07/Neuron.ComponentModel" /&gt;&lt;BreakPoint&gt;Disable&lt;/BreakPoint&gt;&lt;Disable&gt;false&lt;/Disable&gt;&lt;Name&gt;Groups&lt;/Name&gt;&lt;Uniquename /&gt;&lt;Aggregator i:type="NullAggregatorOfESBMessageESBMessageu6r3vdAt" /&gt;&lt;Executor i:type="SynchronousSplitExecutorOfESBMessagexAPWb1W4" /&gt;&lt;ForEach&gt;&lt;Bindings xmlns:d11p1="http://schemas.datacontract.org/2004/07/Neuron.ComponentModel" /&gt;&lt;BreakPoint&gt;Disable&lt;/BreakPoint&gt;&lt;Disable&gt;false&lt;/Disable&gt;&lt;Name&gt;Group&lt;/Name&gt;&lt;Uniquename /&gt;&lt;Children&gt;&lt;ESBMessagePipelineStep xmlns:d12p1="http://schemas.neuronesb.com/pipelines/esb/" i:type="d12p1:EsbMessageCSharpCodePipelineStep"&gt;&lt;Bindings xmlns:d13p1="http://schemas.datacontract.org/2004/07/Neuron.ComponentModel" /&gt;&lt;BreakPoint&gt;Disable&lt;/BreakPoint&gt;&lt;Disable&gt;false&lt;/Disable&gt;&lt;Name&gt;Set Audit Properties&lt;/Name&gt;&lt;Uniquename /&gt;&lt;BreakPointLines xmlns:d13p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays" /&gt;&lt;Code&gt;context.Instance.TraceInformation("++++++++++ Process Inbound X12 - Set Audit Properties Step");

// Save X12 envelope values for future use
XDocument doc = context.Data.ToXDocument();

context.Properties["group"] = doc;

context.Properties["gs02"] = (from x in doc.Root.Descendants("GS")  select (string)x.Element("GS02")).SingleOrDefault().ToString();
context.Properties["gs03"] = (from x in doc.Root.Descendants("GS")  select (string)x.Element("GS03")).SingleOrDefault().ToString();
context.Properties["gs06"] = (from x in doc.Root.Descendants("GS")  select (string)x.Element("GS06")).SingleOrDefault().ToString();
context.Properties["gs08"] = (from x in doc.Root.Descendants("GS")  select (string)x.Element("GS08")).SingleOrDefault().ToString();
context.Properties["st01"] = (from x in doc.Root.Descendants("ST")  select (string)x.Element("ST01")).First().ToString();
context.Properties["ge01"] = (from x in doc.Root.Descendants("GE")  select (string)x.Element("GE01")).SingleOrDefault().ToString();

context.Data.SetProperty("X12", "SenderInterchangeID", 		context.Properties["isa06"].ToString());
context.Data.SetProperty("X12", "ReceiverInterchangeID", 	context.Properties["isa08"].ToString());
context.Data.SetProperty("X12", "TransactionType", 			context.Properties["st01"].ToString());
context.Data.SetProperty("X12", "Direction", 				"Inbound");
context.Data.SetProperty("X12", "DateReceived", 			System.DateTime.Now.ToString());
context.Data.SetProperty("X12", "NumberOfTransactions", 	context.Properties["ge01"].ToString());
context.Data.SetProperty("X12", "InterchangeVersion", 		context.Properties["isa12"].ToString());
context.Data.SetProperty("X12", "InterchangeControlNumber", context.Properties["isa13"].ToString());
context.Data.SetProperty("X12", "SenderApplicationID", 		context.Properties["gs02"].ToString());
context.Data.SetProperty("X12", "ReceiverApplicationID", 	context.Properties["gs03"].ToString());
context.Data.SetProperty("X12", "GroupControlNumber", 		context.Properties["gs06"].ToString());
context.Data.SetProperty("X12", "GroupVersionID", 			context.Properties["gs08"].ToString());
&lt;/Code&gt;&lt;ReferencedAssemblies xmlns:d13p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays"&gt;&lt;d13p1:string&gt;Neuron&lt;/d13p1:string&gt;&lt;d13p1:string&gt;Neuron.Pipelines&lt;/d13p1:string&gt;&lt;d13p1:string&gt;Neuron.Esb&lt;/d13p1:string&gt;&lt;d13p1:string&gt;System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/d13p1:string&gt;&lt;d13p1:string&gt;System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/d13p1:string&gt;&lt;d13p1:string&gt;System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/d13p1:string&gt;&lt;d13p1:string&gt;System.Xml.Linq, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/d13p1:string&gt;&lt;d13p1:string&gt;System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/d13p1:string&gt;&lt;d13p1:string&gt;System.Data.DataSetExtensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/d13p1:string&gt;&lt;d13p1:string&gt;System.Runtime.Serialization, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/d13p1:string&gt;&lt;d13p1:string&gt;System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/d13p1:string&gt;&lt;d13p1:string&gt;Newtonsoft.Json, Version=8.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed&lt;/d13p1:string&gt;&lt;d13p1:string&gt;Microsoft.CSharp, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a&lt;/d13p1:string&gt;&lt;/ReferencedAssemblies&gt;&lt;TypeName&gt;Type25033a39d41444a833d6d24f88d2b3&lt;/TypeName&gt;&lt;/ESBMessagePipelineStep&gt;&lt;ESBMessagePipelineStep xmlns:d12p1="http://schemas.neuronesb.com/pipelines/esb/" i:type="d12p1:EsbMessageAuditPipelineStep"&gt;&lt;Bindings xmlns:d13p1="http://schemas.datacontract.org/2004/07/Neuron.ComponentModel" /&gt;&lt;BreakPoint&gt;Disable&lt;/BreakPoint&gt;&lt;Disable&gt;false&lt;/Disable&gt;&lt;Name&gt;Audit Inbound X12&lt;/Name&gt;&lt;Uniquename /&gt;&lt;d12p1:Action&gt;Receive&lt;/d12p1:Action&gt;&lt;d12p1:AuditPoolTimeout&gt;PT1M&lt;/d12p1:AuditPoolTimeout&gt;&lt;d12p1:FailureDetail i:nil="true" /&gt;&lt;d12p1:FailureType i:nil="true" /&gt;&lt;d12p1:IncludeBody&gt;true&lt;/d12p1:IncludeBody&gt;&lt;d12p1:IncludeMsgProps&gt;true&lt;/d12p1:IncludeMsgProps&gt;&lt;d12p1:MaxAuditInstances&gt;1&lt;/d12p1:MaxAuditInstances&gt;&lt;d12p1:XPath i:nil="true" /&gt;&lt;/ESBMessagePipelineStep&gt;&lt;ESBMessagePipelineStep xmlns:d12p1="http://schemas.neuronesb.com/pipelines/esb/" i:type="d12p1:EsbMessageCSharpCodePipelineStep"&gt;&lt;Bindings xmlns:d13p1="http://schemas.datacontract.org/2004/07/Neuron.ComponentModel" /&gt;&lt;BreakPoint&gt;Disable&lt;/BreakPoint&gt;&lt;Disable&gt;false&lt;/Disable&gt;&lt;Name&gt;Configure Validation&lt;/Name&gt;&lt;Uniquename /&gt;&lt;BreakPointLines xmlns:d13p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays" /&gt;&lt;Code&gt;context.Instance.TraceInformation("++++++++++ Process Inbound X12 - Configure Validation Step - Start");
 
// create the message for stored procedure to validate the agreement
XDocument doc = new XDocument(
new XElement("Execute", new XAttribute("sp", "sp_Agreement_Validate"),
new XElement("Parameters", 
new XElement("Parameter", new XAttribute("name", "@senderinterchangeid"), 		new XAttribute("value", context.Properties["isa06"].ToString().Trim())),
new XElement("Parameter", new XAttribute("name", "@receiverinterchangeid"), 	new XAttribute("value", context.Properties["isa08"].ToString().Trim())),
new XElement("Parameter", new XAttribute("name", "@interchangecontrolnumber"), 	new XAttribute("value", context.Properties["isa13"].ToString().Trim())),
new XElement("Parameter", new XAttribute("name", "@interchangeversion"), 		new XAttribute("value", context.Properties["isa12"].ToString().Trim())),
new XElement("Parameter", new XAttribute("name", "@transactiontype"), 			new XAttribute("value", context.Properties["st01"].ToString().Trim())),
new XElement("Parameter", new XAttribute("name", "@direction"), 				new XAttribute("value", "Inbound")),
new XElement("Parameter", new XAttribute("name", "@applicationsenderid"), 		new XAttribute("value", context.Properties["gs02"].ToString().Trim())),
new XElement("Parameter", new XAttribute("name", "@applicationreceiverid"), 	new XAttribute("value", context.Properties["gs03"].ToString().Trim())),
new XElement("Parameter", new XAttribute("name", "@groupcontrolnumber"), 		new XAttribute("value", context.Properties["gs06"].ToString().Trim())),
new XElement("Parameter", new XAttribute("name", "@applicationversion"),		new XAttribute("value", context.Properties["gs08"].ToString().Trim())))));

context.Data.Text = doc.ToString();	&lt;/Code&gt;&lt;ReferencedAssemblies xmlns:d13p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays"&gt;&lt;d13p1:string&gt;Neuron&lt;/d13p1:string&gt;&lt;d13p1:string&gt;Neuron.Pipelines&lt;/d13p1:string&gt;&lt;d13p1:string&gt;Neuron.Esb&lt;/d13p1:string&gt;&lt;d13p1:string&gt;System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/d13p1:string&gt;&lt;d13p1:string&gt;System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/d13p1:string&gt;&lt;d13p1:string&gt;System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/d13p1:string&gt;&lt;d13p1:string&gt;System.Xml.Linq, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/d13p1:string&gt;&lt;d13p1:string&gt;System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/d13p1:string&gt;&lt;d13p1:string&gt;System.Data.DataSetExtensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/d13p1:string&gt;&lt;d13p1:string&gt;System.Runtime.Serialization, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/d13p1:string&gt;&lt;d13p1:string&gt;System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/d13p1:string&gt;&lt;d13p1:string&gt;Newtonsoft.Json, Version=8.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed&lt;/d13p1:string&gt;&lt;d13p1:string&gt;Microsoft.CSharp, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a&lt;/d13p1:string&gt;&lt;/ReferencedAssemblies&gt;&lt;TypeName&gt;Type4ae29d94f2e4e2cb12e6718e69c7ae&lt;/TypeName&gt;&lt;/ESBMessagePipelineStep&gt;&lt;ESBMessagePipelineStep xmlns:d12p1="http://schemas.neuronesb.com/pipelines/esb/" i:type="d12p1:ExecuteAdapterPipelineStep"&gt;&lt;Bindings xmlns:d13p1="http://schemas.datacontract.org/2004/07/Neuron.ComponentModel" /&gt;&lt;BreakPoint&gt;Disable&lt;/BreakPoint&gt;&lt;Disable&gt;false&lt;/Disable&gt;&lt;Name&gt;Validate Agreement&lt;/Name&gt;&lt;Uniquename /&gt;&lt;d12p1:AdapterName&gt;AEP.SQL.EDI.Agreement.Validate&lt;/d12p1:AdapterName&gt;&lt;d12p1:AdapterPoolTimeout&gt;PT1M&lt;/d12p1:AdapterPoolTimeout&gt;&lt;d12p1:MaxAdapterInstances&gt;100&lt;/d12p1:MaxAdapterInstances&gt;&lt;d12p1:Timeout&gt;PT1M&lt;/d12p1:Timeout&gt;&lt;/ESBMessagePipelineStep&gt;&lt;ESBMessagePipelineStep xmlns:d12p1="http://schemas.neuronesb.com/pipelines/esb/" i:type="d12p1:EsbMessageCSharpCodePipelineStep"&gt;&lt;Bindings xmlns:d13p1="http://schemas.datacontract.org/2004/07/Neuron.ComponentModel" /&gt;&lt;BreakPoint&gt;Disable&lt;/BreakPoint&gt;&lt;Disable&gt;false&lt;/Disable&gt;&lt;Name&gt;Check Control Numbers&lt;/Name&gt;&lt;Uniquename /&gt;&lt;BreakPointLines xmlns:d13p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays" /&gt;&lt;Code&gt;context.Instance.TraceInformation("++++++++++ Process Inbound X12 - Check Control Numbers Step - Start");

XDocument doc = context.Data.ToXDocument();

// Check control numbers for mismatch
string interchangectlnum = 	(from x in doc.Root.Descendants("Column") where (string)x.Attribute("name").Value == "ISA13InterchangeControlNumber" 	select (string)x.Value).SingleOrDefault().ToString();
string groupctlnum = 		(from x in doc.Root.Descendants("Column") where (string)x.Attribute("name").Value == "GS06GroupControlNumber" 			select (string)x.Value).SingleOrDefault().ToString();

// Check ISA13
if(Int32.Parse(context.Properties["isa13"].ToString().TrimStart('0')) != (Int32.Parse(interchangectlnum) + 1))
{
	context.Instance.TraceWarning("...!!!........Interchange Control Number Mismatch.  Number out of sequence.  Previous Control Number: " + Int32.Parse(context.Properties["isa13"].ToString()) + " Current Control Number: " + interchangectlnum);
}

// Check GS06
if(Int32.Parse(context.Properties["gs06"].ToString().TrimStart('0')) != (Int32.Parse(groupctlnum) + 1))
{
	context.Instance.TraceWarning("...!!!........Group Control Number Mismatch.  Number out of sequence.  Previous Control Number: " + Int32.Parse(context.Properties["gs06"].ToString()) + " Current Control Number: " + groupctlnum);
}
&lt;/Code&gt;&lt;ReferencedAssemblies xmlns:d13p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays"&gt;&lt;d13p1:string&gt;Neuron&lt;/d13p1:string&gt;&lt;d13p1:string&gt;Neuron.Pipelines&lt;/d13p1:string&gt;&lt;d13p1:string&gt;Neuron.Esb&lt;/d13p1:string&gt;&lt;d13p1:string&gt;System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/d13p1:string&gt;&lt;d13p1:string&gt;System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/d13p1:string&gt;&lt;d13p1:string&gt;System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/d13p1:string&gt;&lt;d13p1:string&gt;System.Xml.Linq, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/d13p1:string&gt;&lt;d13p1:string&gt;System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/d13p1:string&gt;&lt;d13p1:string&gt;System.Data.DataSetExtensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/d13p1:string&gt;&lt;d13p1:string&gt;System.Runtime.Serialization, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/d13p1:string&gt;&lt;d13p1:string&gt;System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/d13p1:string&gt;&lt;d13p1:string&gt;Newtonsoft.Json, Version=8.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed&lt;/d13p1:string&gt;&lt;d13p1:string&gt;Microsoft.CSharp, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a&lt;/d13p1:string&gt;&lt;/ReferencedAssemblies&gt;&lt;TypeName&gt;Typea8782e4fd5f451191d84e31b2bc8cf&lt;/TypeName&gt;&lt;/ESBMessagePipelineStep&gt;&lt;ESBMessagePipelineStep i:type="DecisionPipelineStepOfESBMessagexAPWb1W4"&gt;&lt;Bindings xmlns:d13p1="http://schemas.datacontract.org/2004/07/Neuron.ComponentModel" /&gt;&lt;BreakPoint&gt;Disable&lt;/BreakPoint&gt;&lt;Disable&gt;false&lt;/Disable&gt;&lt;Name&gt;Valid TP Agreement?&lt;/Name&gt;&lt;Uniquename /&gt;&lt;Branches&gt;&lt;BranchOfESBMessagexAPWb1W4&gt;&lt;BreakPoint&gt;Disable&lt;/BreakPoint&gt;&lt;Condition i:type="CodeBranchConditionOfESBMessagexAPWb1W4"&gt;&lt;Code&gt;context.Instance.TraceInformation("++++++++++ Process Inbound X12 - Valid TP Agreement? Decision - Start");

XDocument doc = context.Data.ToXDocument();
if ((from x in doc.Root.Descendants("Column") where (string)x.Attribute("name").Value == "Status" select (string)x.Value).SingleOrDefault().ToString() == "Valid")
{
	context.Instance.TraceInformation("............Process Inbound X12 - Valid TP Agreement? Decision - VALID Agreement");
	return true;
}
else
{
	context.Instance.TraceInformation("............Process Inbound X12 - Valid TP Agreement? Decision - INVALID Agreement");
	return false;
}
	&lt;/Code&gt;&lt;ReferencedAssemblies xmlns:d16p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays"&gt;&lt;d16p1:string&gt;Neuron&lt;/d16p1:string&gt;&lt;d16p1:string&gt;Neuron.Pipelines&lt;/d16p1:string&gt;&lt;d16p1:string&gt;Neuron.Esb&lt;/d16p1:string&gt;&lt;d16p1:string&gt;System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/d16p1:string&gt;&lt;d16p1:string&gt;System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/d16p1:string&gt;&lt;d16p1:string&gt;System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/d16p1:string&gt;&lt;d16p1:string&gt;System.Xml.Linq, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/d16p1:string&gt;&lt;d16p1:string&gt;System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/d16p1:string&gt;&lt;d16p1:string&gt;System.Data.DataSetExtensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/d16p1:string&gt;&lt;d16p1:string&gt;System.Runtime.Serialization, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/d16p1:string&gt;&lt;d16p1:string&gt;System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/d16p1:string&gt;&lt;d16p1:string&gt;Newtonsoft.Json, Version=8.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed&lt;/d16p1:string&gt;&lt;d16p1:string&gt;Microsoft.CSharp, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a&lt;/d16p1:string&gt;&lt;/ReferencedAssemblies&gt;&lt;/Condition&gt;&lt;Disable&gt;false&lt;/Disable&gt;&lt;Name&gt;If&lt;/Name&gt;&lt;Steps&gt;&lt;Bindings xmlns:d16p1="http://schemas.datacontract.org/2004/07/Neuron.ComponentModel" /&gt;&lt;BreakPoint&gt;Disable&lt;/BreakPoint&gt;&lt;Disable&gt;false&lt;/Disable&gt;&lt;Name&gt;Group&lt;/Name&gt;&lt;Uniquename /&gt;&lt;Children&gt;&lt;ESBMessagePipelineStep xmlns:d17p1="http://schemas.neuronesb.com/pipelines/esb/" i:type="d17p1:EsbMessageCSharpCodePipelineStep"&gt;&lt;Bindings xmlns:d18p1="http://schemas.datacontract.org/2004/07/Neuron.ComponentModel" /&gt;&lt;BreakPoint&gt;Disable&lt;/BreakPoint&gt;&lt;Disable&gt;false&lt;/Disable&gt;&lt;Name&gt;Restore XML&lt;/Name&gt;&lt;Uniquename /&gt;&lt;BreakPointLines xmlns:d18p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays" /&gt;&lt;Code&gt;context.Data.Text = context.Properties["group"].ToString();&lt;/Code&gt;&lt;ReferencedAssemblies xmlns:d18p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays"&gt;&lt;d18p1:string&gt;Neuron&lt;/d18p1:string&gt;&lt;d18p1:string&gt;Neuron.Pipelines&lt;/d18p1:string&gt;&lt;d18p1:string&gt;Neuron.Esb&lt;/d18p1:string&gt;&lt;d18p1:string&gt;System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/d18p1:string&gt;&lt;d18p1:string&gt;System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/d18p1:string&gt;&lt;d18p1:string&gt;System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/d18p1:string&gt;&lt;d18p1:string&gt;System.Xml.Linq, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/d18p1:string&gt;&lt;d18p1:string&gt;System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/d18p1:string&gt;&lt;d18p1:string&gt;System.Data.DataSetExtensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/d18p1:string&gt;&lt;d18p1:string&gt;System.Runtime.Serialization, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/d18p1:string&gt;&lt;d18p1:string&gt;System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/d18p1:string&gt;&lt;d18p1:string&gt;Newtonsoft.Json, Version=8.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed&lt;/d18p1:string&gt;&lt;d18p1:string&gt;Microsoft.CSharp, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a&lt;/d18p1:string&gt;&lt;/ReferencedAssemblies&gt;&lt;TypeName&gt;Typedc25f22822b49928a43b56072edb62&lt;/TypeName&gt;&lt;/ESBMessagePipelineStep&gt;&lt;ESBMessagePipelineStep i:type="SplitterPipelineStepOfESBMessageESBMessageu6r3vdAt"&gt;&lt;Bindings xmlns:d18p1="http://schemas.datacontract.org/2004/07/Neuron.ComponentModel" /&gt;&lt;BreakPoint&gt;Disable&lt;/BreakPoint&gt;&lt;Disable&gt;false&lt;/Disable&gt;&lt;Name&gt;Transactions&lt;/Name&gt;&lt;Uniquename /&gt;&lt;Aggregator i:type="NullAggregatorOfESBMessageESBMessageu6r3vdAt" /&gt;&lt;Executor i:type="AsynchronousSplitExecutorOfESBMessagexAPWb1W4"&gt;&lt;MaxThreadCount&gt;100&lt;/MaxThreadCount&gt;&lt;/Executor&gt;&lt;ForEach&gt;&lt;Bindings xmlns:d19p1="http://schemas.datacontract.org/2004/07/Neuron.ComponentModel" /&gt;&lt;BreakPoint&gt;Disable&lt;/BreakPoint&gt;&lt;Disable&gt;false&lt;/Disable&gt;&lt;Name&gt;Group&lt;/Name&gt;&lt;Uniquename /&gt;&lt;Children&gt;&lt;ESBMessagePipelineStep xmlns:d20p1="http://schemas.neuronesb.com/pipelines/esb/" i:type="d20p1:EsbMessageCSharpCodePipelineStep"&gt;&lt;Bindings xmlns:d21p1="http://schemas.datacontract.org/2004/07/Neuron.ComponentModel" /&gt;&lt;BreakPoint&gt;Disable&lt;/BreakPoint&gt;&lt;Disable&gt;false&lt;/Disable&gt;&lt;Name&gt;Dynamic Mapping&lt;/Name&gt;&lt;Uniquename /&gt;&lt;BreakPointLines xmlns:d21p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays" /&gt;&lt;Code&gt;context.Instance.TraceInformation("++++++++++ Process Inbound X12 - Dynamic Mapping Process Step - Start");

string mapName = context.Properties["isa06"].ToString() + "." + 
	             context.Properties["isa08"].ToString() + "." +  
	             context.Properties["isa12"].ToString() + "." + 
	             context.Properties["st01"].ToString()  + "." +
				 context.Properties["gs02"].ToString()  + "." +
				 context.Properties["gs03"].ToString()  + "." +
				 context.Properties["gs08"].ToString()  + ".Inbound";

//check if map exists
string outVal;
if(context.EnvironmentVariables.TryGetValue(mapName, out outVal))
{
	//Add xslt parameters, if any
	System.Xml.Xsl.XsltArgumentList argsList = new System.Xml.Xsl.XsltArgumentList();

	argsList.AddParam("SenderID", "", 			context.Properties["isa06"].ToString());
	argsList.AddParam("ReceiverID", "", 		context.Properties["isa08"].ToString());
	argsList.AddParam("Version", "", 			context.Properties["isa12"].ToString());
	argsList.AddParam("TransactionType", "", 	context.Properties["st01"].ToString());
	argsList.AddParam("SenderGroup", "", 		context.Properties["gs02"].ToString());
	argsList.AddParam("ReceiverGroup", "", 		context.Properties["gs03"].ToString());
	argsList.AddParam("VersionGroup", "", 		context.Properties["gs08"].ToString());
	
	//enable scripting in the transform
	var settings = new System.Xml.Xsl.XsltSettings();
	settings.EnableScript = true;

	//Load xsl transform
	var myXslTrans = new System.Xml.Xsl.XslCompiledTransform(); 
	myXslTrans.Load(context.EnvironmentVariables[mapName], settings, new System.Xml.XmlUrlResolver()); 

	//Execute the transform....
	System.IO.StringWriter writer = new System.IO.StringWriter();

	//....with parameters
	try
	{
		myXslTrans.Transform(context.Data.ToXmlDocument(), argsList, writer); 
	}
	catch(System.Xml.Xsl.XsltException xslex)
	{
		context.Instance.TraceInformation("ERROR: " + xslex.Message);
		throw xslex;
	}
	finally
	{
		writer.Close();
	}
	
	//....or without parameters
	//myXslTrans.Transform(context.Data.ToXmlDocument(), null, writer);

	context.Data.Text = writer.ToString();
	writer.Close();
}
else
{
	throw new System.Exception("No environment variable exists for map: " + mapName);
}&lt;/Code&gt;&lt;ReferencedAssemblies xmlns:d21p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays"&gt;&lt;d21p1:string&gt;Neuron&lt;/d21p1:string&gt;&lt;d21p1:string&gt;Neuron.Pipelines&lt;/d21p1:string&gt;&lt;d21p1:string&gt;Neuron.Esb&lt;/d21p1:string&gt;&lt;d21p1:string&gt;System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/d21p1:string&gt;&lt;d21p1:string&gt;System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/d21p1:string&gt;&lt;d21p1:string&gt;System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/d21p1:string&gt;&lt;d21p1:string&gt;System.Xml.Linq, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/d21p1:string&gt;&lt;d21p1:string&gt;System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/d21p1:string&gt;&lt;d21p1:string&gt;System.Data.DataSetExtensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/d21p1:string&gt;&lt;d21p1:string&gt;System.Runtime.Serialization, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/d21p1:string&gt;&lt;d21p1:string&gt;System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/d21p1:string&gt;&lt;/ReferencedAssemblies&gt;&lt;TypeName&gt;Type74c7096bb56495fa37eaacabad5e69&lt;/TypeName&gt;&lt;/ESBMessagePipelineStep&gt;&lt;ESBMessagePipelineStep i:type="DecisionPipelineStepOfESBMessagexAPWb1W4"&gt;&lt;Bindings xmlns:d21p1="http://schemas.datacontract.org/2004/07/Neuron.ComponentModel" /&gt;&lt;BreakPoint&gt;Disable&lt;/BreakPoint&gt;&lt;Disable&gt;false&lt;/Disable&gt;&lt;Name&gt;Return999?&lt;/Name&gt;&lt;Uniquename /&gt;&lt;Branches&gt;&lt;BranchOfESBMessagexAPWb1W4&gt;&lt;BreakPoint&gt;Disable&lt;/BreakPoint&gt;&lt;Condition i:type="CodeBranchConditionOfESBMessagexAPWb1W4"&gt;&lt;Code&gt;if(context.Data.GetProperty("tpa", "AckRequested") == "0")
{
	return false;
}
else
{
	return true;
}
&lt;/Code&gt;&lt;ReferencedAssemblies xmlns:d24p1="http://schemas.microsoft.com/2003/10/Serialization/Arrays"&gt;&lt;d24p1:string&gt;Neuron&lt;/d24p1:string&gt;&lt;d24p1:string&gt;Neuron.Pipelines&lt;/d24p1:string&gt;&lt;d24p1:string&gt;Neuron.Esb&lt;/d24p1:string&gt;&lt;d24p1:string&gt;System, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/d24p1:string&gt;&lt;d24p1:string&gt;System.Core, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/d24p1:string&gt;&lt;d24p1:string&gt;System.Xml, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/d24p1:string&gt;&lt;d24p1:string&gt;System.Xml.Linq, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/d24p1:string&gt;&lt;d24p1:string&gt;System.Data, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/d24p1:string&gt;&lt;d24p1:string&gt;System.Data.DataSetExtensions, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/d24p1:string&gt;&lt;d24p1:string&gt;System.Runtime.Serialization, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/d24p1:string&gt;&lt;d24p1:string&gt;System.ServiceModel, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089&lt;/d24p1:string&gt;&lt;d24p1:string&gt;Newtonsoft.Json, Version=8.0.0.0, Culture=neutral, PublicKeyToken=30ad4fe6b2a6aeed&lt;/d24p1:string&gt;&lt;d24p1:string&gt;Microsoft.CSharp, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a&lt;/d24p1:string&gt;&lt;/ReferencedAssemblies&gt;&lt;/Condition&gt;&lt;Disable&gt;false&lt;/Disable&gt;&lt;Name&gt;If&lt;/Name&gt;&lt;Steps&gt;&lt;Bindings xmlns:d24p1="http://schemas.datacontract.org/2004/07/Neuron.ComponentModel" /&gt;&lt;BreakPoint&gt;Disable&lt;/BreakPoint&gt;&lt;Disable&gt;false&lt;/Disable&gt;&lt;Name&gt;Group&lt;/Name&gt;&lt;Uniquename /&gt;&lt;Children&gt;&lt;ESBMessagePipelineStep xmlns:d25p1="http://schemas.neuronesb.com/pipelines/esb/" i:type="d25p1:EsbMessagePipelineExecutionPipelineStep"&gt;&lt;Bindings xmlns:d26p1="http://schemas.datacontract.org/2004/07/Neuron.ComponentModel" /&gt;&lt;BreakPoint&gt;Disable&lt;/BreakPoint&gt;&lt;Disable&gt;false&lt;/Disable&gt;&lt;Name&gt;Generate 999&lt;/Name&gt;&lt;Uniquename /&gt;&lt;d25p1:FileName i:nil="true" /&gt;&lt;d25p1:MaxInstances&gt;100&lt;/d25p1:MaxInstances&gt;&lt;d25p1:PipelineName&gt;Process.Generate.999&lt;/d25p1:PipelineName&gt;&lt;d25p1:PoolTimeout&gt;PT1M&lt;/d25p1:PoolTimeout&gt;&lt;/ESBMessagePipelineStep&gt;&lt;ESBMessagePipelineStep i:type="CancelPipelineStepOfESBMessagexAPWb1W4"&gt;&lt;Bindings xmlns:d26p1="http://schemas.datacontract.org/2004/07/Neuron.ComponentModel" /&gt;&lt;BreakPoint&gt;Disable&lt;/BreakPoint&gt;&lt;Disable&gt;false&lt;/Disable&gt;&lt;Name&gt;Cancel&lt;/Name&gt;&lt;Uniquename&gt;e4357fc2-5741-402b-bd29-9f6157b386cd&lt;/Uniquename&gt;&lt;/ESBMessagePipelineStep&gt;&lt;/Children&gt;&lt;/Steps&gt;&lt;/BranchOfESBMessagexAPWb1W4&gt;&lt;BranchOfESBMessagexAPWb1W4&gt;&lt;BreakPoint&gt;Disable&lt;/BreakPoint&gt;&lt;Condition i:type="AlwaysBranchConditionOfESBMessagexAPWb1W4" /&gt;&lt;Disable&gt;false&lt;/Disable&gt;&lt;Name&gt;Else&lt;/Name&gt;&lt;Steps&gt;&lt;Bindings xmlns:d24p1="http://schemas.datacontract.org/2004/07/Neuron.ComponentModel" /&gt;&lt;BreakPoint&gt;Disable&lt;/BreakPoint&gt;&lt;Disable&gt;false&lt;/Disable&gt;&lt;Name&gt;Group&lt;/Name&gt;&lt;Uniquename /&gt;&lt;Children /&gt;&lt;/Steps&gt;&lt;/BranchOfESBMessagexAPWb1W4&gt;&lt;/Branches&gt;&lt;/ESBMessagePipelineStep&gt;&lt;/Children&gt;&lt;/ForEach&gt;&lt;MaxThreadCount&gt;100&lt;/MaxThreadCount&gt;&lt;Splitter xmlns:d18p1="http://schemas.neuronesb.com/pipelines/esb/" i:type="d18p1:XPathEsbMessageSplitter"&gt;&lt;d18p1:XPath&gt;FunctionGroup/Transaction&lt;/d18p1:XPath&gt;&lt;/Splitter&gt;&lt;/ESBMessagePipelineStep&gt;&lt;/Children&gt;&lt;/Steps&gt;&lt;/BranchOfESBMessagexAPWb1W4&gt;&lt;BranchOfESBMessagexAPWb1W4&gt;&lt;BreakPoint&gt;Disable&lt;/BreakPoint&gt;&lt;Condition i:type="AlwaysBranchConditionOfESBMessagexAPWb1W4" /&gt;&lt;Disable&gt;false&lt;/Disable&gt;&lt;Name&gt;Else&lt;/Name&gt;&lt;Steps&gt;&lt;Bindings xmlns:d16p1="http://schemas.datacontract.org/2004/07/Neuron.ComponentModel" /&gt;&lt;BreakPoint&gt;Disable&lt;/BreakPoint&gt;&lt;Disable&gt;false&lt;/Disable&gt;&lt;Name&gt;Group&lt;/Name&gt;&lt;Uniquename /&gt;&lt;Children /&gt;&lt;/Steps&gt;&lt;/BranchOfESBMessagexAPWb1W4&gt;&lt;/Branches&gt;&lt;/ESBMessagePipelineStep&gt;&lt;/Children&gt;&lt;/ForEach&gt;&lt;MaxThreadCount&gt;10&lt;/MaxThreadCount&gt;&lt;Splitter xmlns:d10p1="http://schemas.neuronesb.com/pipelines/esb/" i:type="d10p1:XPathEsbMessageSplitter"&gt;&lt;d10p1:XPath&gt;/Interchange/FunctionGroup&lt;/d10p1:XPath&gt;&lt;/Splitter&gt;&lt;/ESBMessagePipelineStep&gt;&lt;/Children&gt;&lt;/ForEach&gt;&lt;MaxThreadCount&gt;10&lt;/MaxThreadCount&gt;&lt;Splitter xmlns:d7p1="http://schemas.neuronesb.com/pipelines/esb/" i:type="d7p1:XPathEsbMessageSplitter"&gt;&lt;d7p1:XPath&gt;/Interchanges/Interchange&lt;/d7p1:XPath&gt;&lt;/Splitter&gt;&lt;/ESBMessagePipelineStep&gt;&lt;/Children&gt;&lt;/Try&gt;&lt;/ESBMessagePipelineStep&gt;&lt;/Steps&gt;&lt;/ESBMessagePipeline&gt;</PipelineBlob>
</ESBMessagePipelineStorage>